trigger:
  branches:
    include:
    - main
  paths:
    include:
    - clean-azure-iac-terraform/**
    exclude:
    - '**/*.md'
    - '**/*.example'
    - '**/*.old'
    - '**/*.bak'

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: environment
  displayName: Environment
  type: string
  default: dev
  values:
  - dev
  - staging
  - prod
- name: testMode
  displayName: Run in Test Mode
  type: boolean
  default: false

variables:
  # Load environment-specific variable group
  - ${{ if eq(parameters.environment, 'dev') }}:
    - group: GCSE-PrimeEDM-Dev
  - ${{ if eq(parameters.environment, 'staging') }}:
    - group: GCSE-PrimeEDM-Staging
  - ${{ if eq(parameters.environment, 'prod') }}:
    - group: GCSE-PrimeEDM-Prod
  
  # Load common variables
  - group: GCSE-PrimeEDM-Common
  
  # Pipeline-specific variables
  - name: terraformVersion
    value: '1.3.9'
  - name: kubeloginVersion
    value: '0.0.24'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/clean-azure-iac-terraform'
  - name: tfStateResourceGroup
    value: 'rg-terraform-state'
  - name: tfStateStorageAccount
    value: 'sttfstategcse'
  - name: tfStateContainer
    value: 'tfstate'
  - name: tfStateKey
    value: '${{ parameters.environment }}.terraform.tfstate'
  # DNS role assignment control
  - name: createDnsRoleAssignment
    value: ${{ parameters.environment == 'prod' }}

stages:
- stage: Validate
  displayName: 'Validate Terraform'
  jobs:
  - job: Validate
    displayName: 'Validate'
    steps:
    - task: Bash@3
      displayName: 'Install Terraform $(terraformVersion)'
      inputs:
        targetType: 'inline'
        script: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform=$(terraformVersion)*
          terraform version

    - task: Bash@3
      displayName: 'Install kubelogin'
      inputs:
        targetType: 'inline'
        script: |
          curl -LO https://github.com/Azure/kubelogin/releases/download/v$(kubeloginVersion)/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          rm -rf bin/ kubelogin-linux-amd64.zip
          kubelogin --version

    - task: AzureCLI@2
      displayName: 'Configure Azure OIDC Authentication'
      inputs:
        azureSubscription: 'AzureServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Export Azure authentication environment variables
          echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(clientId)"
          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"

    - task: Bash@3
      displayName: 'Terraform Init'
      inputs:
        targetType: 'inline'
        script: |
          cd $(workingDirectory)
          terraform init \
            -backend-config="resource_group_name=$(tfStateResourceGroup)" \
            -backend-config="storage_account_name=$(tfStateStorageAccount)" \
            -backend-config="container_name=$(tfStateContainer)" \
            -backend-config="key=$(tfStateKey)"
      env:
        ARM_USE_OIDC: $(ARM_USE_OIDC)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    - task: Bash@3
      displayName: 'Terraform Validate'
      inputs:
        targetType: 'inline'
        script: |
          cd $(workingDirectory)
          terraform validate
      env:
        ARM_USE_OIDC: $(ARM_USE_OIDC)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    - task: Bash@3
      displayName: 'Generate Variables and Run Terraform Plan'
      inputs:
        targetType: 'inline'
        script: |
          cd $(workingDirectory)
          
          # Create a temporary tfvars file for this pipeline run
          cat > pipeline-generated.tfvars << EOF
          # Project Information
          project                    = "$(project)"
          environment                = "${{ parameters.environment }}"
          location                   = "$(location)"
          owner                      = "$(owner)"
          cost_center                = "$(costCenter)"
          
          # Networking
          vnet_address_space         = ["$(vnetAddressSpace)"]
          subnet_prefixes            = $(subnetPrefixes)
          subnet_names               = $(subnetNames)
          
          # AKS Configuration
          kubernetes_version         = "$(kubernetesVersion)"
          aks_vm_size                = "$(aksVmSize)"
          aks_node_count             = $(aksNodeCount)
          aks_max_pods               = $(aksMaxPods)
          
          # Security
          key_vault_sku              = "$(keyVaultSku)"
          cert_manager_namespace     = "$(certManagerNamespace)"
          cert_manager_identity_name = "$(certManagerIdentityName)"
          
          # DNS
          dns_zone_name              = "$(dnsZoneName)"
          
          # Monitoring
          log_analytics_retention_days = $(logAnalyticsRetentionDays)
          
          # Module behavior
          create_k8s_resources       = $(createK8sResources)
          create_federated_identity  = $(createFederatedIdentity)
          create_dns_role_assignment = $(createDnsRoleAssignment)
          create_wildcard_record     = $(createWildcardRecord)
          
          # Additional variables as needed
          tenant_id                  = "$(tenantId)"
          EOF
          
          # Display the generated tfvars (excluding sensitive values)
          echo "Generated pipeline-generated.tfvars with environment-specific values"
          
          # Run Terraform plan
          terraform plan \
            -var-file="pipeline-generated.tfvars" \
            -var="test_mode=${{ parameters.testMode }}" \
            -var="postgresql_admin_password=$(postgresqlAdminPassword)" \
            -out=$(System.DefaultWorkingDirectory)/terraform.tfplan
      env:
        ARM_USE_OIDC: $(ARM_USE_OIDC)
        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
        ARM_TENANT_ID: $(ARM_TENANT_ID)
        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

    - publish: $(System.DefaultWorkingDirectory)/terraform.tfplan
      artifact: TerraformPlan
      displayName: 'Publish Terraform Plan'

- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: ApplyTerraform
    displayName: 'Apply Terraform'
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Install Terraform $(terraformVersion)'
            inputs:
              targetType: 'inline'
              script: |
                wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
                echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
                sudo apt update && sudo apt install terraform=$(terraformVersion)*
                terraform version

          - task: Bash@3
            displayName: 'Install kubelogin'
            inputs:
              targetType: 'inline'
              script: |
                curl -LO https://github.com/Azure/kubelogin/releases/download/v$(kubeloginVersion)/kubelogin-linux-amd64.zip
                unzip kubelogin-linux-amd64.zip
                sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
                rm -rf bin/ kubelogin-linux-amd64.zip
                kubelogin --version

          - task: AzureCLI@2
            displayName: 'Configure Azure OIDC Authentication'
            inputs:
              azureSubscription: 'AzureServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Export Azure authentication environment variables
                echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(clientId)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"

          - task: Bash@3
            displayName: 'Terraform Init'
            inputs:
              targetType: 'inline'
              script: |
                cd $(workingDirectory)
                terraform init \
                  -backend-config="resource_group_name=$(tfStateResourceGroup)" \
                  -backend-config="storage_account_name=$(tfStateStorageAccount)" \
                  -backend-config="container_name=$(tfStateContainer)" \
                  -backend-config="key=$(tfStateKey)"
            env:
              ARM_USE_OIDC: $(ARM_USE_OIDC)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)

          - download: current
            artifact: TerraformPlan
            displayName: 'Download Terraform Plan'

          - task: Bash@3
            displayName: 'Terraform Apply'
            inputs:
              targetType: 'inline'
              script: |
                cd $(workingDirectory)
                terraform apply -auto-approve $(Pipeline.Workspace)/TerraformPlan/terraform.tfplan
            env:
              ARM_USE_OIDC: $(ARM_USE_OIDC)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              ARM_TENANT_ID: $(ARM_TENANT_ID)
              ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID) 