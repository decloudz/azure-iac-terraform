# This workflow installs Terraform and uses OIDC authentication with Azure
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`. 
# On push events to the "main" branch, `terraform apply` will be executed.

name: 'Terraform with OIDC'

on:
  push:
    branches: [ "main" ]  # Changed from "master" to "main" to match your repo
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      test_mode:
        description: 'Run in test mode (no resource creation)'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: read
  id-token: write # Required for OIDC authentication with Azure
  pull-requests: write # To comment on PRs

# Set environment variables for Terraform Azure Provider
env:
  TF_WORKING_DIR: .
  TF_STATE_RESOURCE_GROUP: rg-terraform-state
  TF_STATE_STORAGE_ACCOUNT: sttfstategcse
  TF_STATE_CONTAINER: tfstate
  TERRAFORM_VERSION: 1.3.9
  # These are used by the Terraform AzureRM provider for authentication
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  # This job is just to show diagnostic information about what OIDC token is being used
  show-token-info:
    name: 'Show OIDC Token Info'
    runs-on: ubuntu-latest
    steps:
      - name: Show OIDC Subject
        run: |
          echo "GitHub Repository: $GITHUB_REPOSITORY"
          echo "GitHub Ref: $GITHUB_REF"
          echo "GitHub Event Name: $GITHUB_EVENT_NAME"
          echo "GitHub Workflow: $GITHUB_WORKFLOW"
          echo "Expected OIDC Subject Format (Branch): repo:${GITHUB_REPOSITORY}:ref:${GITHUB_REF#refs/heads/}"
          echo "Expected OIDC Subject Format (Environment): repo:${GITHUB_REPOSITORY}:environment:${{ github.event.inputs.environment || 'dev' }}"
          
  terraform:
    name: 'Terraform'
    needs: show-token-info
    env: 
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_test_mode: ${{ github.event.inputs.test_mode || 'false' }}
    runs-on: ubuntu-latest
    # Important: This creates an environment reference that will be used in the OIDC token
    environment: ${{ github.event.inputs.environment || 'dev' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Login to Azure using OIDC - environment-based authentication
    - name: Azure Login (Environment-based auth)
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        cd ${TF_WORKING_DIR}
        terraform init \
          -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP}" \
          -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT}" \
          -backend-config="container_name=${TF_STATE_CONTAINER}" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"

    # Validate Terraform configuration
    - name: Terraform Validate
      id: validate
      run: |
        cd ${TF_WORKING_DIR}
        terraform validate

    # Create Terraform variables file from GitHub repository variables
    - name: Create Terraform Variables File
      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cd ${TF_WORKING_DIR}
        cat > pipeline-generated.tfvars << EOF
        # Project Information
        project                    = "${{ vars.PROJECT || 'gcse-prime-edm' }}"
        environment                = "${{ github.event.inputs.environment || 'dev' }}"
        location                   = "${{ vars.LOCATION || 'eastus2' }}"
        owner                      = "${{ vars.OWNER || 'DevOps Team' }}"
        cost_center                = "${{ vars.COST_CENTER || 'IT-123' }}"
        
        # Module behavior
        create_k8s_resources       = ${{ vars.CREATE_K8S_RESOURCES || 'true' }}
        create_federated_identity  = ${{ vars.CREATE_FEDERATED_IDENTITY || 'true' }}
        create_dns_role_assignment = ${{ github.event.inputs.environment == 'prod' || 'false' }}
        
        # Authentication variables
        subscription_id            = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        client_id                  = "${{ secrets.AZURE_CLIENT_ID }}"
        tenant_id                  = "${{ secrets.AZURE_TENANT_ID }}"
        test_mode                  = ${{ github.event.inputs.test_mode || 'false' }}
        EOF

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cd ${TF_WORKING_DIR}
        if [ -f "pipeline-generated.tfvars" ]; then
          terraform plan -var-file="pipeline-generated.tfvars" -input=false -out=tfplan
        else
          terraform plan -input=false -out=tfplan
        fi

    # Upload the Terraform plan so it can be applied later
    - name: Upload Terraform Plan
      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        
    # Add comments to PRs with plan output
    - name: Add Plan Comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        INIT: "${{ steps.init.outcome }}"
        VALIDATE: "${{ steps.validate.outcome }}"
        PLAN: "${{ steps.plan.outcome }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On push to "main" or workflow_dispatch, apply Terraform changes
    - name: Terraform Apply
      if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
      run: |
        cd ${TF_WORKING_DIR}
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Download the plan for workflow_dispatch events
          terraform apply -auto-approve tfplan
        else
          # For push events, create and apply a new plan
          if [ -f "pipeline-generated.tfvars" ]; then
            terraform apply -var-file="pipeline-generated.tfvars" -auto-approve
          else
            terraform apply -auto-approve
          fi
        fi 