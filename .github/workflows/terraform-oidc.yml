# This workflow installs Terraform and uses OIDC authentication with Azure
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`. 
# On push events to the "main" branch, `terraform apply` will be executed.

name: 'Terraform with OIDC'

on:
  push:
    branches: [ "main" ]  # Changed from "master" to "main" to match your repo
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      test_mode:
        description: 'Run in test mode (no resource creation)'
        required: false
        default: 'true'
        type: boolean
      force_unlock:
        description: 'Force unlock state if locked'
        required: false
        default: false
        type: boolean
      lock_id:
        description: 'Lock ID to unlock (if force_unlock is true)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write # Required for OIDC authentication with Azure
  pull-requests: write # To comment on PRs

# Set environment variables for Terraform Azure Provider
env:
  TF_WORKING_DIR: .
  TF_STATE_RESOURCE_GROUP: rg-terraform-state
  TF_STATE_STORAGE_ACCOUNT: sttfstategcse
  TF_STATE_CONTAINER: tfstate
  TERRAFORM_VERSION: 1.3.9
  # These are used by the Terraform AzureRM provider for authentication
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  # Reduced log level - only show errors and warnings instead of DEBUG
  TF_LOG: ERROR
  # Increase lock timeout to 5 minutes (default is 1)
  TF_LOCK_TIMEOUT: 300s

jobs:
  # This job is just to show diagnostic information about what OIDC token is being used
  show-token-info:
    name: 'Show OIDC Token Info'
    runs-on: ubuntu-latest
    steps:
      - name: Show OIDC Subject
        run: |
          echo "GitHub Repository: $GITHUB_REPOSITORY"
          echo "GitHub Ref: $GITHUB_REF"
          echo "GitHub Event Name: $GITHUB_EVENT_NAME"
          echo "GitHub Workflow: $GITHUB_WORKFLOW"
          echo "Expected OIDC Subject Format (Branch): repo:${GITHUB_REPOSITORY}:ref:${GITHUB_REF#refs/heads/}"
          echo "Expected OIDC Subject Format (Environment): repo:${GITHUB_REPOSITORY}:environment:${{ github.event.inputs.environment || 'dev' }}"
      
      - name: Check Required Secrets
        run: |
          echo "Checking if required secrets are set..."
          [[ -n "${{ secrets.AZURE_CLIENT_ID }}" ]] || { echo "::error::AZURE_CLIENT_ID secret is not set"; exit 1; }
          [[ -n "${{ secrets.AZURE_TENANT_ID }}" ]] || { echo "::error::AZURE_TENANT_ID secret is not set"; exit 1; }
          [[ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]] || { echo "::error::AZURE_SUBSCRIPTION_ID secret is not set"; exit 1; }
          [[ -n "${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" ]] || { echo "::error::POSTGRESQL_ADMIN_PASSWORD secret is not set"; exit 1; }
          echo "All required secrets are set."
          
  terraform:
    name: 'Terraform'
    needs: show-token-info
    env: 
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_test_mode: ${{ github.event.inputs.test_mode || 'false' }}
      TF_VAR_postgresql_admin_password: ${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}
    runs-on: ubuntu-latest
    # Important: This creates an environment reference that will be used in the OIDC token
    environment: ${{ github.event.inputs.environment || 'dev' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      
    # List files for debugging
    - name: List Directory Content
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        echo "Terraform files:"
        find . -name "*.tf" | sort
        echo "Environment tfvars files:"
        find ./environments -name "*.tfvars" | sort

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Login to Azure using OIDC - environment-based authentication
    - name: Azure Login (Environment-based auth)
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange
        
    # Verify Azure login worked by listing resource groups
    - name: Verify Azure Login
      run: |
        echo "Verifying Azure login by listing resource groups..."
        az group list --query "[].name" -o tsv
        echo "Checking if state resource group exists..."
        az group show --name ${TF_STATE_RESOURCE_GROUP} --query "name" -o tsv || echo "State resource group not found!"
        echo "Checking if state storage account exists..."
        az storage account show --name ${TF_STATE_STORAGE_ACCOUNT} --resource-group ${TF_STATE_RESOURCE_GROUP} --query "name" -o tsv || echo "State storage account not found!"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: |
        cd ${TF_WORKING_DIR}
        echo "Running terraform init with backend configs:"
        echo "  Resource Group: ${TF_STATE_RESOURCE_GROUP}"
        echo "  Storage Account: ${TF_STATE_STORAGE_ACCOUNT}"
        echo "  Container: ${TF_STATE_CONTAINER}"
        echo "  Key: ${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"
        
        # Redirect stdout to file for error handling but also display to console
        terraform init \
          -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP}" \
          -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT}" \
          -backend-config="container_name=${TF_STATE_CONTAINER}" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate" \
          2>&1 | tee terraform.log
          
    # Force unlock state if requested - MUST come after terraform init
    - name: Force Unlock Terraform State
      if: github.event.inputs.force_unlock == 'true' && github.event.inputs.lock_id != ''
      run: |
        cd ${TF_WORKING_DIR}
        echo "Attempting to force unlock state with lock ID: ${{ github.event.inputs.lock_id }}"
        terraform force-unlock -force ${{ github.event.inputs.lock_id }}
        
        # Exit early if this is just an unlock operation
        if [ "${{ github.event.inputs.force_unlock }}" == "true" ]; then
          echo "Force unlock operation completed. Exiting workflow early."
          exit 0
        fi

    # Validate Terraform configuration
    - name: Terraform Validate
      id: validate
      # Skip remaining steps if we're just doing a force unlock
      if: github.event.inputs.force_unlock != 'true'
      run: |
        cd ${TF_WORKING_DIR}
        terraform validate

    # Determines the environment-specific tfvars file to use
    - name: Set Environment Variables
      id: set_env_vars
      if: github.event.inputs.force_unlock != 'true'
      run: |
        cd ${TF_WORKING_DIR}
        ENV="${{ github.event.inputs.environment || 'dev' }}"
        echo "Using environment: $ENV"
        
        # Check if environment-specific tfvars file exists
        if [ -f "environments/${ENV}.tfvars" ]; then
          echo "Using environment file: environments/${ENV}.tfvars"
          echo "env_tfvars_file=environments/${ENV}.tfvars" >> $GITHUB_OUTPUT
        else
          echo "Environment file environments/${ENV}.tfvars not found! Using dev.tfvars as fallback."
          echo "env_tfvars_file=environments/dev.tfvars" >> $GITHUB_OUTPUT
        fi

    # Generates an execution plan for Terraform
    # Run this for pull requests AND workflow dispatches AND pushes to main
    - name: Terraform Plan
      id: plan
      # Skip remaining steps if we're just doing a force unlock
      if: github.event.inputs.force_unlock != 'true'
      run: |
        cd ${TF_WORKING_DIR}
        echo "Running plan for event type: ${{ github.event_name }}"
        
        # Show all required variables 
        echo "Checking for required variables in terraform configuration..."
        terraform providers
        
        # Run plan with error handling
        set +e
        # Using environment-specific tfvars file
        echo "Using tfvars file: ${{ steps.set_env_vars.outputs.env_tfvars_file }}"
        
        # Redirect stdout to file for error handling but also display to console
        terraform plan \
          -var-file="${{ steps.set_env_vars.outputs.env_tfvars_file }}" \
          -var="postgresql_admin_password=${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
          -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
          -var="test_mode=${{ github.event.inputs.test_mode || 'false' }}" \
          -lock-timeout=300s \
          -input=false \
          -out=tfplan 2>&1 | tee terraform.stdout
        PLAN_EXIT_CODE=$?
        set -e
        
        if [ $PLAN_EXIT_CODE -ne 0 ]; then
          echo "::error::Terraform plan failed with exit code $PLAN_EXIT_CODE"
          
          # If we got a lock error, extract and display the lock ID
          if grep -q "Error acquiring the state lock" terraform.stdout; then
            LOCK_ID=$(grep -A 10 "Error acquiring the state lock" terraform.stdout | grep "ID:" | awk '{print $2}')
            echo "::warning::State is locked with ID: $LOCK_ID"
            echo "To unlock, run the workflow with force_unlock=true and lock_id=$LOCK_ID"
          fi
          
          exit $PLAN_EXIT_CODE
        else
          echo "Terraform plan succeeded. Plan file created at tfplan"
        fi

    # Upload the Terraform plan so it can be applied later
    - name: Upload Terraform Plan
      if: (github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch') && github.event.inputs.force_unlock != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan
        
    # Add comments to PRs with plan output
    - name: Add Plan Comment to PR
      if: github.event_name == 'pull_request' && github.event.inputs.force_unlock != 'true'
      uses: actions/github-script@v6
      env:
        INIT: "${{ steps.init.outcome }}"
        VALIDATE: "${{ steps.validate.outcome }}"
        PLAN: "${{ steps.plan.outcome }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On push to "main" or workflow_dispatch, apply Terraform changes
    - name: Terraform Apply
      if: ((github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch') && github.event.inputs.force_unlock != 'true'
      run: |
        cd ${TF_WORKING_DIR}
        echo "Running apply for event type: ${{ github.event_name }}"
        
        # Run apply with error handling
        set +e
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Download the plan for workflow_dispatch events
          echo "Applying the plan from workflow_dispatch event"
          # Redirect stdout to file for error handling but also display to console
          terraform apply -lock-timeout=300s -auto-approve tfplan 2>&1 | tee terraform.stdout
          APPLY_EXIT_CODE=$?
        else
          # For push events, create and apply a new plan
          echo "Applying with variables for push event"
          # Using environment-specific tfvars file
          echo "Using tfvars file: ${{ steps.set_env_vars.outputs.env_tfvars_file }}"
          
          # Redirect stdout to file for error handling but also display to console
          terraform apply \
            -var-file="${{ steps.set_env_vars.outputs.env_tfvars_file }}" \
            -var="postgresql_admin_password=${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
            -var="client_id=${{ secrets.AZURE_CLIENT_ID }}" \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
            -var="test_mode=${{ github.event.inputs.test_mode || 'false' }}" \
            -lock-timeout=300s \
            -auto-approve 2>&1 | tee terraform.stdout
          APPLY_EXIT_CODE=$?
        fi
        set -e
        
        if [ $APPLY_EXIT_CODE -ne 0 ]; then
          echo "::error::Terraform apply failed with exit code $APPLY_EXIT_CODE"
          
          # If we got a lock error, extract and display the lock ID
          if grep -q "Error acquiring the state lock" terraform.stdout; then
            LOCK_ID=$(grep -A 10 "Error acquiring the state lock" terraform.stdout | grep "ID:" | awk '{print $2}')
            echo "::warning::State is locked with ID: $LOCK_ID"
            echo "To unlock, run the workflow with force_unlock=true and lock_id=$LOCK_ID"
          fi
          
          exit $APPLY_EXIT_CODE
        else
          echo "Terraform apply succeeded!"
        fi 