# This workflow installs Terraform and uses OIDC authentication with Azure
# On pull request events, this workflow will run `terraform init`, `terraform fmt`, and `terraform plan`. 
# On push events to the "master" branch, `terraform apply` will be executed.

name: 'Terraform with OIDC'

on:
  push:
    branches: [ "master" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write # Required for OIDC authentication with Azure

jobs:
  terraform:
    name: 'Terraform'
    env: 
      TF_WORKING_DIR: .
      TF_STATE_RESOURCE_GROUP: rg-terraform-state
      TF_STATE_STORAGE_ACCOUNT: sttfstategcse
      TF_STATE_CONTAINER: tfstate
      TERRAFORM_VERSION: 1.3.9
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    # Login to Azure using OIDC
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: false
        environment: azurecloud
        allow-no-subscriptions: false
        audience: api://AzureADTokenExchange

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        cd ${TF_WORKING_DIR}
        terraform init \
          -backend-config="resource_group_name=${TF_STATE_RESOURCE_GROUP}" \
          -backend-config="storage_account_name=${TF_STATE_STORAGE_ACCOUNT}" \
          -backend-config="container_name=${TF_STATE_CONTAINER}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: |
        cd ${TF_WORKING_DIR}
        terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        cd ${TF_WORKING_DIR}
        terraform plan -input=false -out=tfplan

    # On push to "master", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        cd ${TF_WORKING_DIR}
        terraform apply -auto-approve tfplan 