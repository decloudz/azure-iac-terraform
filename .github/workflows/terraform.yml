name: 'Terraform CI/CD (DEPRECATED)'

# ⚠️ THIS WORKFLOW IS DEPRECATED ⚠️
# Please use the 'Terraform with OIDC' workflow instead (terraform-oidc.yml)
# This workflow is kept for reference only and will be removed in the future

on:
  # Disable automatic triggers
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      test_mode:
        description: 'Run in test mode (no resource creation)'
        required: false
        default: 'true'
        type: boolean

# Add these permissions for OIDC authentication
permissions:
  contents: read
  id-token: write  # Required for OIDC authentication
  pull-requests: write

env:
  TF_WORKING_DIR: '.'
  TF_STATE_RESOURCE_GROUP: 'rg-terraform-state'
  TF_STATE_STORAGE_ACCOUNT: 'sttfstategcse'
  TF_STATE_CONTAINER: 'tfstate'
  TERRAFORM_VERSION: '1.3.9'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Install Azure CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl apt-transport-https lsb-release gnupg
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
        echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
        sudo apt-get update
        sudo apt-get install -y azure-cli
        az --version
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      id: init
      run: |
        cd ${TF_WORKING_DIR}
        terraform init \
          -backend-config="resource_group_name=${{ env.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ env.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ env.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"

    - name: Terraform Validate
      id: validate
      run: |
        cd ${TF_WORKING_DIR}
        terraform validate

    - name: Create Terraform Variables File
      run: |
        cd ${TF_WORKING_DIR}
        cat > pipeline-generated.tfvars << EOF
        # Project Information
        project                    = "${{ vars.PROJECT }}"
        environment                = "${{ github.event.inputs.environment || 'dev' }}"
        location                   = "${{ vars.LOCATION }}"
        owner                      = "${{ vars.OWNER }}"
        cost_center                = "${{ vars.COST_CENTER }}"
        
        # Networking
        vnet_address_space         = ["${{ vars.VNET_ADDRESS_SPACE }}"]
        subnet_prefixes            = ${{ vars.SUBNET_PREFIXES }}
        subnet_names               = ${{ vars.SUBNET_NAMES }}
        
        # AKS Configuration
        kubernetes_version         = "${{ vars.KUBERNETES_VERSION }}"
        aks_vm_size                = "${{ vars.AKS_VM_SIZE }}"
        aks_node_count             = ${{ vars.AKS_NODE_COUNT }}
        aks_max_pods               = ${{ vars.AKS_MAX_PODS }}
        
        # Security
        key_vault_sku              = "${{ vars.KEY_VAULT_SKU }}"
        cert_manager_namespace     = "${{ vars.CERT_MANAGER_NAMESPACE }}"
        cert_manager_identity_name = "${{ vars.CERT_MANAGER_IDENTITY_NAME }}"
        
        # DNS
        dns_zone_name              = "${{ vars.DNS_ZONE_NAME }}"
        
        # Module behavior
        create_k8s_resources       = ${{ vars.CREATE_K8S_RESOURCES }}
        create_federated_identity  = ${{ vars.CREATE_FEDERATED_IDENTITY }}
        create_dns_role_assignment = ${{ github.event.inputs.environment == 'prod' || false }}
        create_wildcard_record     = ${{ vars.CREATE_WILDCARD_RECORD }}
        
        # Additional variables
        tenant_id                  = "${{ secrets.AZURE_TENANT_ID }}"
        EOF

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cd ${TF_WORKING_DIR}
        terraform plan \
          -var-file="pipeline-generated.tfvars" \
          -var="test_mode=${{ github.event.inputs.test_mode || 'true' }}" \
          -var="postgresql_admin_password=${{ secrets.POSTGRESQL_ADMIN_PASSWORD }}" \
          -out=tfplan
      continue-on-error: false

    - name: Upload Terraform Plan
      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan

    - name: Terraform Apply
      if: github.event_name == 'workflow_dispatch'
      run: |
        cd ${TF_WORKING_DIR}
        terraform apply -auto-approve tfplan
        
    # Add comments to PRs with plan output
    - name: Add Plan Comment to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          }) 